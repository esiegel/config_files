# add custom zsh function dir
# Must go on top.
fpath+=~/.zfunc

############## OH_MY_ZSH INIT

ZSH=$HOME/.oh-my-zsh
ZSH_THEME="robbyrussell"

DISABLE_AUTO_UPDATE="true"

# Need to set default python before sourcing oh my zsh
export PATH="/usr/local/opt/python@2/libexec/bin:$PATH"

# Need to set virtualenv default home before plugins
export WORKON_HOME="~/.virtualenvs"

# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
plugins=(git-extras pip virtualenvwrapper zsh-syntax-highlighting docker)

# oh-my-zsh entry
source $ZSH/oh-my-zsh.sh

############## ZSH CONFIG

export PATH=$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin

# Direnv hook for loading directory environments
# Setting an empty log format prevents logging.
eval "$(direnv hook zsh)"
export DIRENV_LOG_FORMAT=""

# Increase cmd history size
export HISTSIZE=12000

# don't ask if "this is correct"
unsetopt correct_all
unsetopt correct

# set editor variables
export EDITOR=$(which vim)
export PAGER=less

# Less needs to pass through escaped color characters.
export LESS=-R

CODE=$HOME/code

if [[ -d $HOME/Dropbox ]]; then
   DROPBOX=$HOME/Dropbox
elif [[ -d "$HOME/Dropbox (Personal)" ]]; then
   DROPBOX="$HOME/Dropbox (Personal)"
fi

# load custom source
if [[ -f $HOME/.zshrc-custom ]]; then
   source $HOME/.zshrc-custom
fi

# load all files in .zsh_files
for file in ~/.zsh_files/*(DN); do
  source "$file"
done

# allow CTRL-x-e to edit the command line in $EDITOR
autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

############## NODE

# Add Node modules to path
export PATH=$PATH:/usr/local/share/npm/bin

############## Haskell

# add haskell cabal binaries to path
export PATH=$PATH:$HOME/.cabal/bin

# cabal uninstall
cabal-uninstall() {
   if [[ $# -ne 1 ]]; then
       echo cabal-uninstall: need to speicify package to uninstall
       return 1
   fi
   package=$1
   ghc-pkg unregister $package >/dev/null 2>&1
   find ~/.cabal -type d -name "*$package*" | xargs rm -rf
   find ~/.cabal -type f -name "*$package*" | xargs rm
}

################## GOLANG

export GOPATH=$CODE/go
export PATH=$PATH:$GOPATH/bin

################## RUST

export PATH=$PATH:$HOME/.cargo/bin
export RUST_SRC_PATH=~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src

################## PYTHON
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3

################## Node

export PATH=$PATH:$CODE/tern/bin
export PATH=$PATH:./node_modules/.bin

################# tmux

pair_program() {
  local session_name='pair'
  local tmux_socket='/tmp/tmux.socket'
  local client_count=$(tmux -S /tmp/tmux.socket list-clients | grep tty | wc -l | tr -d '[[:space:]]')

  if [[ $client_count == 0 ]]; then
    # cleanup code to remove socket as it will be stale and tmux gets confused.
    rm $tmux_socket
  fi

  if [[ ! -S $tmux_socket ]]; then
    # create a session through the socket in tmp, but do not attach
    tmux -S $tmux_socket new -s $session_name -d
  fi

  local socket_group=$(stat -f '%Sg' /tmp/tmux.socket)

  if [[ $socket_group != 'tmux' ]]; then
    # change the group so multiple users can connect
    chgrp tmux $tmux_socket
    chmod g+ws $tmux_socket
  fi

  # attach to session
  tmux -S $tmux_socket attach -t $session_name
}

################## Docker
docker_eval() {
  eval "$(docker-machine env default)"
}

################## Other

# Sourcetree to path
alias stree=/Applications/SourceTree.app/Contents/Resources/stree

alias emacsapp="open /usr/local/Cellar/emacs/24.4-dev/Emacs.app"

# ack 2.0 doesn't support searching all files, this does.
alias acka="ack --type-set='all:match:.*' -k"

# Virtualbox vm control
alias start_kernvm="VBoxManage startvm --type headless kernel_dev"
alias stop_kernvm="VBoxManage controlvm kernel_dev poweroff"
alias ssh_kernvm="ssh -p 2222 eric@127.0.0.1"

# shortcuts
# note: dropbox can contain spaces so we must wrap it in quotes
alias ideas="$EDITOR \"$DROPBOX/ideas.md\""
alias notes="$EDITOR \"$DROPBOX/notes.md\""
alias questions="$EDITOR \"$DROPBOX/questions.md\""
alias scratch="$EDITOR \"$DROPBOX/scratch.md\""
alias todo="$EDITOR \"$DROPBOX/todo.md\""

# android sdk
export ANDROID_HOME=/usr/local/opt/android-sdk

# GPG default key
export GPGKEY=ED6BE39D

# swift repl
alias swift="xcrun --sdk iphonesimulator8.0 swift"

# add local scripts
export PATH=$PATH:$CODE/scripts

# fzf init
export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_DEFAULT_OPTS='--reverse --border --height=20 --history-size=10000'
if [ -e /usr/local/opt/fzf/shell/completion.zsh ]; then
  source /usr/local/opt/fzf/shell/key-bindings.zsh
  source /usr/local/opt/fzf/shell/completion.zsh
fi

# ruby env home
export RBENV_ROOT=/usr/local/var/rbenv
alias bundleinstall="bundle install --path .gems"

# To enable shims and autocompletion add to your profile:
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

coffeeweb() {
  local startup_file=~/Desktop/snippets/web_repl_init.coffee
  local npath="${HOME}/code/web/app/client:${HOME}/code/web/app/assets/javascripts:${HOME}/code/web/vendor/components"

  NODE_PATH=$npath nesh -c -e $startup_file
}

# arcanist code review
if [[ -d $CODE/arcanist/bin ]]; then
   export PATH=$PATH:$CODE/arcanist/bin
   source $CODE/arcanist/resources/shell/bash-completion
fi

# fetches the patch files and patches directly in order specified
arcpatch_via_patch() {
  if [[ $# -lt 1 ]]; then
    echo arcpatch_via_patch [DIFF_ID...]
    return 1
  fi

  # loop over ids to find last.  Not sure of bash/zsh better way.
  for id in "$@"; do
    local last_id=$id
  done

  # name this branch using our last diff id
  git checkout -b "arcpatch-$last_id"

  # iterate over each diff file and patch
  for id in "$@"; do
    local patch_file=$(mktemp -t arcpatch)

    arc export --revision $id --git > "$patch_file"
    arc patch --nobranch --patch "$patch_file" --nocommit
    git add -A
    git commit -a -m "$id"
  done
}

# include scripts
export PATH=$PATH:$CODE/scripts

exit_if_failure() {
  exit_code=$?
  msg=${1:-BAD_EXIT_CODE}

  if [[ $exit_code != 0 ]]; then
    echo $msg
    exit $exit_code
  fi
}

# chrome
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

############## FILE HELPERS

# search for a match and replace all matches with replacement
search_and_replace() {
  if [[ $# -lt 2 ]]; then
    echo search_and_replace PATTERN REPLACEMENT
    return 1
  fi

  local pattern=$1
  local replacement=$2

  # shift arguments twice, so that $@ will be empty or hold --filetype flags
  shift
  shift

  ag "$pattern" -l "$@" | xargs perl -pi -e "s/$pattern/$replacement/g"
}

############## GIT HELPERS

# modified files
alias modified_files="git ls-files -m -o -X .gitignore -X ~/.gitignore"

# find recent files committed
recent_changes() {
  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-HEAD}
  git diff-tree --name-only -r "${start_revision}..${end_revision}"
  git ls-files --others --exclude-standard
}


backup_branch() {
  #CODE_BACKUP_DIR must be defined

  local repo_name=$(basename $(git rev-parse --show-toplevel))
  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  local now=$(date +'%Y%m%d_%H%M%s')
  local backup_dir="${CODE_BACKUP_DIR}/${repo_name}/${branch_name}/${branch_name}_${now}"
  local files_path=${backup_dir}/_files.txt

  mkdir -p $backup_dir

  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-$branch_name}

  # add revision numbers
  echo "START: $start_revision: $(git rev-parse $start_revision)" >> $files_path
  echo "END: $end_revision: $(git rev-parse $end_revision)" >> $files_path
  echo "--------------------------------------------------" >> $files_path

  # add changed files
  recent_changes $start_revision $end_revision >> $files_path
  modified_files >> $files_path
  sort -u -o $files_path $files_path

  # copy modified files
  rsync -a --ignore-missing-args --files-from=$files_path . $backup_dir

  # create git bundle backup.
  git bundle create "$backup_dir/backup.bundle" "$start_revision..$end_revision"
}

num_lines_changed() {
  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-HEAD}
  local add_sub_str=$(git diff --numstat $start_revision $end_revision | squeeze | cut -d' ' -f 1,2)
  local add_total=$(echo $add_sub_str | cut -d' ' -f 1 | paste -sd+ - | bc)
  local rm_total=$(echo $add_sub_str | cut -d' ' -f 2 | paste -sd+ - | bc)

  echo "ADDED: $add_total REMOVED: $rm_total"
}

############## AWS HELPERS

ec2_instances() {
  # Fetches EC2 instance info.
  #
  # {
  #   "i-9e1dfa63": {
  #     "dns": "ec2-54-175-236-111.compute-1.amazonaws.com",
  #     "name": "logstash-02"
  #   },
  #   "i-9f1dfa62": {
  #     "dns": "ec2-54-175-242-4.compute-1.amazonaws.com",
  #     "name": "logstash-02"
  #   }
  # }

  local cmd='aws ec2 describe-instances --filters "Name=instance-state-name,Values=running"'
  local jqcmd="jq --sort-keys '.Reservations | map(.Instances) | flatten | map({key: .InstanceId, value: {name: .Tags[0].Value, dns: .PublicDnsName, private_dns: .PrivateDnsName, private_ip: .PrivateIpAddress, public_ip: .PublicIpAddress}}) | from_entries'"
  if [[ -n $1 ]]; then
    cmd="$cmd --filters 'Name=tag:Name,Values=*$1*'"
  fi

  eval $cmd | eval $jqcmd
} 

############## JQ HELPERS

# Find all unique json keys in a json file
jq_uniq_keys() {
  ftype=$(stat -f "%T" $stdin)
  if [[ "$ftype" != "|" ]]; then
     FILE=$1
  else
     FILE=${FILE:-/dev/stdin}
  fi

  cat $FILE | jq 'paths | map(.|tostring) | join(".")' | sed -E 's/\.[[:digit:]]+/.[]/g' | sort | uniq
}
