# uncomment to profile zsh loading
# after shell loads run `zprof`
# zmodload zsh/zprof

# add custom zsh function dir
# Must go on top.
fpath+=~/.zfunc

############## OH_MY_ZSH INIT

ZSH=$HOME/.oh-my-zsh
ZSH_THEME="robbyrussell"

DISABLE_AUTO_UPDATE="true"

# homebrew prefix
HB=$(brew --prefix)

# Need to set default python before sourcing oh my zsh
export PATH="$HB/opt/python@3/libexec/bin:/Users/eric.siegel/Library/Python/3.10/bin:$PATH"

# Need to set virtualenv default home before plugins
export WORKON_HOME="~/.virtualenvs"
export VIRTUALENVWRAPPER_PYTHON="$HB/bin/python3"

# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
plugins=(git-extras pip virtualenvwrapper golang)

# oh-my-zsh entry
source $ZSH/oh-my-zsh.sh
autoload -U compinit && compinit

############## ZSH CONFIG

export PATH="$PATH:$HB/bin:$HB/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin"

# Direnv hook for loading directory environments
# Setting an empty log format prevents logging.
eval "$(direnv hook zsh)"
export DIRENV_LOG_FORMAT=""

# Increase cmd history size
export HISTSIZE=12000

# don't ask if "this is correct"
unsetopt correct_all
unsetopt correct

# set editor variables
export EDITOR=$(which vim)
export PAGER=less

# Less needs to pass through escaped color characters.
export LESS=-R

# location for XDG config files, for example git will look here
export XDG_CONFIG_HOME=$HOME/.config

CODE=$HOME/code

if [[ -d $HOME/Dropbox ]]; then
   export DROPBOX=$HOME/Dropbox
elif [[ -d "$HOME/Dropbox (Personal)" ]]; then
   export DROPBOX="$HOME/Dropbox (Personal)"
elif [[ -d "$HOME/Library/CloudStorage/Box-Box" ]]; then
   export DROPBOX="$HOME/Library/CloudStorage/Box-Box/eric.siegel"
fi

# load custom source
if [[ -f $HOME/.zshrc-custom ]]; then
   source $HOME/.zshrc-custom
fi

# load all files in .zsh_files
for file in ~/.zsh_files/*(DN); do
  source "$file"
done

# allow CTRL-x-e to edit the command line in $EDITOR
autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

############## NODE

# Add Node modules to path
export PATH=$PATH:/usr/local/share/npm/bin

############## Haskell

# add haskell cabal binaries to path
export PATH=$PATH:$HOME/.cabal/bin

# cabal uninstall
cabal-uninstall() {
   if [[ $# -ne 1 ]]; then
       echo cabal-uninstall: need to speicify package to uninstall
       return 1
   fi
   package=$1
   ghc-pkg unregister $package >/dev/null 2>&1
   find ~/.cabal -type d -name "*$package*" | xargs rm -rf
   find ~/.cabal -type f -name "*$package*" | xargs rm
}

################## GOLANG

export PATH="$HB/opt/go@1.22/bin:$PATH"

export GOPATH=$CODE/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin

# required for new clang to by default search
export CGO_LDFLAGS="-L$HB/lib"


go_build_multi() {
  local main_path="$1"
  local output_name="$2"

  local osx_arm_out="$2_osx_arm"
  local osx_amd_out="$2_osx_amd"
  local linux_out="$2_linux"
  local windows_out="$2_windows"

  echo "Building ARM64 OSX: $1 -> $osx_arm_out"
  GOOS=darwin  GOARCH=arm64 go build -o "$osx_arm_out" "$1" || exit 1
  echo "Building AMD64 OSX: $1 -> $osx_amd_out"
  GOOS=darwin  GOARCH=amd64 go build -o "$osx_amd_out" "$1" || exit 1
  echo "Building LINUX: $1 -> $linux_out"
  GOOS=linux   GOARCH=amd64 go build -o "$linux_out" "$1" || exit 1
  echo "Building WINDOWS: $1 -> $windows_out"
  GOOS=windows GOARCH=amd64 go build -o "$windows_out" "$1" || exit 1

  # create a tar.gz file
  tar -cvzf "$2.tar.gz" "$osx_arm_out" "$osx_amd_out" "$linux_out" "$windows_out"
}

# Creates a git patch, and runs golangci-lint
# should be run at the root of the repo
golangci_from_patch() {
  git diff main > /tmp/golangci.patch
  golangci-lint run --print-issued-lines=false --out-format=colored-line-number --issues-exit-code=0 --max-issues-per-linter 0 --max-same-issues 0 --new-from-patch=/tmp/golangci.patch
}

golangci_all() {
  golangci-lint run --print-issued-lines=false --out-format=colored-line-number --issues-exit-code=0 --max-issues-per-linter 0 --max-same-issues 0 ./...
}

################## GITHUB
function gh_review_comments() {
  url=$(gh pr view --json url | jq '.url' | tr -d '"')
  owner=$(echo "$url" | cut -d '/' -f 4)
  name=$(echo "$url" | cut -d '/' -f 5)
  pr=$(echo "$url" | cut -d '/' -f 7)

  echo "OWNER" $owner
  echo "name" $name
  echo "pr" $pr

  gh api graphql -F owner="$owner" -F name="$name" -F pr="$pr" \
  -f query='
  query($name: String!, $owner: String!, $pr: Int!) {
    repository(owner: $owner, name: $name) {
      pullRequest(number: $pr) {
        reviewThreads(first: 100) {
          nodes {
            comments(first: 100) {
              nodes {
                author{login} body createdAt
              }
            }
          }
        }
      }
    }
  }'
}

function gh_review_reqs() {
  local repo="$1"

  if [[ $repo ]]; then
    # query open review requests on specific repo
    echo "Querying: $repo"
    local data=$(gh pr list --json 'reviewRequests' --repo "$repo")
  else 
    # query open review requests on local repo in directory
    local data=$(gh pr list --json 'reviewRequests')
  fi

  echo "$data" | jq 'map(.reviewRequests) | flatten | map(.login) | .[]' | sort | uniq -c | sort -nr
}

################## RUST

export PATH=$PATH:$HOME/.cargo/bin
export RUST_SRC_PATH=~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$HOME/.rustup/toolchains/stable-x86_64-apple-darwin/lib

################## Node

export PATH=$PATH:$CODE/tern/bin
export PATH=$PATH:./node_modules/.bin

################# tmux

pair_program() {
  local session_name='pair'
  local tmux_socket='/tmp/tmux.socket'
  local client_count=$(tmux -S /tmp/tmux.socket list-clients | grep tty | wc -l | tr -d '[[:space:]]')

  if [[ $client_count == 0 ]]; then
    # cleanup code to remove socket as it will be stale and tmux gets confused.
    rm $tmux_socket
  fi

  if [[ ! -S $tmux_socket ]]; then
    # create a session through the socket in tmp, but do not attach
    tmux -S $tmux_socket new -s $session_name -d
  fi

  local socket_group=$(stat -f '%Sg' /tmp/tmux.socket)

  if [[ $socket_group != 'tmux' ]]; then
    # change the group so multiple users can connect
    chgrp tmux $tmux_socket
    chmod g+ws $tmux_socket
  fi

  # attach to session
  tmux -S $tmux_socket attach -t $session_name
}

################## Docker
docker_eval() {
  eval "$(docker-machine env default)"
}

################## Other

alias list_functions="print -l ${(ok)functions}"

# Sourcetree to path
alias stree=/Applications/SourceTree.app/Contents/Resources/stree

alias emacsapp="open $HB/usr/local/Cellar/emacs/24.4-dev/Emacs.app"

# ack 2.0 doesn't support searching all files, this does.
alias acka="ack --type-set='all:match:.*' -k"

# Virtualbox vm control
alias start_kernvm="VBoxManage startvm --type headless kernel_dev"
alias stop_kernvm="VBoxManage controlvm kernel_dev poweroff"
alias ssh_kernvm="ssh -p 2222 eric@127.0.0.1"

# shortcuts
# note: dropbox can contain spaces so we must wrap it in quotes
alias ideas="$EDITOR \"$DROPBOX/ideas.md\""
# alias notes="$EDITOR \"$DROPBOX/notes/$1.md\""
alias questions="$EDITOR \"$DROPBOX/questions.md\""
alias scratch="$EDITOR \"$DROPBOX/scratch.md\""
alias todo="$EDITOR \"$DROPBOX/todo.md\""

notes() {
  dir_fullpath=$(ls -d $DROPBOX/notes)
  paths=$(ls $DROPBOX/notes | fzf --multi)
  fullpaths=$(echo "$paths" | xargs -I "{}" echo "$dir_fullpath/{}")
  vim $(echo "$fullpaths")
}

# android sdk
export ANDROID_HOME="$HB/opt/android-sdk"

# GPG default key
export GPGKEY=ED6BE39D

# swift repl
alias swift="xcrun --sdk iphonesimulator8.0 swift"

# add local scripts
export SCRIPTS_PATH="$DROPBOX/scripts"
export PATH=$PATH:$SCRIPTS_PATH
export PATH=$PATH:$SCRIPTS_PATH/bin

# fzf init
export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_DEFAULT_OPTS="--bind 'ctrl-a:toggle-all' --reverse --border --height=20 --history-size=10000"
if [ -e "$HB/opt/fzf/shell/completion.zsh" ]; then
  source "$HB/opt/fzf/shell/key-bindings.zsh"
  source "$HB/opt/fzf/shell/completion.zsh"
fi

# ripgrep
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# ruby env home
export RBENV_ROOT="$HB/var/rbenv"
alias bundleinstall="bundle install --path .gems"

# To enable shims and autocompletion add to your profile:
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

coffeeweb() {
  local startup_file=~/Desktop/snippets/web_repl_init.coffee
  local npath="${HOME}/code/web/app/client:${HOME}/code/web/app/assets/javascripts:${HOME}/code/web/vendor/components"

  NODE_PATH=$npath nesh -c -e $startup_file
}

# arcanist code review
if [[ -d $CODE/arcanist/bin ]]; then
   export PATH=$PATH:$CODE/arcanist/bin
   source $CODE/arcanist/resources/shell/bash-completion
fi

# fetches the patch files and patches directly in order specified
arcpatch_via_patch() {
  if [[ $# -lt 1 ]]; then
    echo arcpatch_via_patch [DIFF_ID...]
    return 1
  fi

  # loop over ids to find last.  Not sure of bash/zsh better way.
  for id in "$@"; do
    local last_id=$id
  done

  # name this branch using our last diff id
  git checkout -b "arcpatch-$last_id"

  # iterate over each diff file and patch
  for id in "$@"; do
    local patch_file=$(mktemp -t arcpatch)

    arc export --revision $id --git > "$patch_file"
    arc patch --nobranch --patch "$patch_file" --nocommit
    git add -A
    git commit -a -m "$id"
  done
}

# include scripts
export PATH=$PATH:$CODE/scripts

exit_if_failure() {
  exit_code=$?
  msg=${1:-BAD_EXIT_CODE}

  if [[ $exit_code != 0 ]]; then
    echo $msg
    exit $exit_code
  fi
}

# chrome
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

############## FILE HELPERS

# search for a match and replace all matches with replacement
search_and_replace() {
  if [[ $# -lt 2 ]]; then
    echo search_and_replace PATTERN REPLACEMENT
    return 1
  fi

  local pattern=$1
  local replacement=$2

  # shift arguments twice, so that $@ will be empty or hold --filetype flags
  shift
  shift

  ag "$pattern" -l "$@" | xargs perl -pi -e "s/$pattern/$replacement/g"
}

############## GIT HELPERS

# modified files
alias modified_files="git ls-files -m -o -X .gitignore -X ~/.gitignore"

# find recent files committed
recent_changes() {
  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-HEAD}

  # used so that we can modify the paths and open recent changes no matter where we
  # are in the git tree
  # Will be '.' if we are at the root or `a/b/c`
  local root_path=$(git root -r)
  local slash_count=$(echo "$root_path" | tr -cd '/' | wc -c)
  local path_prefix=""
  for ((i=0; i<$slash_count; i++)); do
    path_prefix+="../"
  done

  git diff-tree --name-only -r "${start_revision}..${end_revision}" | awk -v prefix="$path_prefix" '{print prefix $0}'
  git ls-files --others --exclude-standard | awk -v prefix="$path_prefix" '{print prefix $0}'
}


backup_branch() {
  #CODE_BACKUP_DIR must be defined

  local repo_name=$(basename $(git rev-parse --show-toplevel))
  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  local now=$(date +'%Y%m%d_%H%M%s')
  local backup_dir="${CODE_BACKUP_DIR}/${repo_name}/${branch_name}/${branch_name}_${now}"
  local files_path=${backup_dir}/_files.txt

  mkdir -p $backup_dir

  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-$branch_name}

  # add revision numbers
  echo "START: $start_revision: $(git rev-parse $start_revision)" >> $files_path
  echo "END: $end_revision: $(git rev-parse $end_revision)" >> $files_path
  echo "--------------------------------------------------" >> $files_path

  # add changed files
  recent_changes $start_revision $end_revision >> $files_path
  modified_files >> $files_path
  sort -u -o $files_path $files_path

  # copy modified files
  rsync -a --ignore-missing-args --files-from=$files_path . $backup_dir

  # create git bundle backup.
  git bundle create "$backup_dir/backup.bundle" "$start_revision..$end_revision"
}

num_lines_changed() {
  local default_start_revision=$(git ancestor)
  local start_revision=${1:-$default_start_revision}
  local end_revision=${2:-HEAD}
  local add_sub_str=$(git diff --numstat $start_revision $end_revision | squeeze | cut -d' ' -f 1,2)
  local add_total=$(echo $add_sub_str | cut -d' ' -f 1 | paste -sd+ - | bc)
  local rm_total=$(echo $add_sub_str | cut -d' ' -f 2 | paste -sd+ - | bc)

  echo "ADDED: $add_total REMOVED: $rm_total"
}

# Joins args delimeter.
# Used to add '--or' in between params
# https://stackoverflow.com/questions/1527049/how-can-i-join-elements-of-an-array-in-bash
function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

# grepAll PATTERN1, PATTERN2, ...
#
# Finds all files that contain all of the patterns even if they are on separate lines.
# Builds and runs a command like:
#   git grep --all-match -l -e 'PATTERN1' --or -e 'PATTERN2'
#
# NOTE: Only works within git repos
function grepAll() {
  local patterns=()
  for pattern in "$@"; do
    patterns+=("-e '$pattern'")
  done

  local joined_patterns=$(join_by ' --or ' "${patterns[@]}")

  local cmd="git --no-pager grep --all-match -l -E -i $joined_patterns"

  eval "$cmd"
}

############## AWS HELPERS

ec2_instances() {
  # Fetches EC2 instance info.
  #
  # ec2_instances --region us-east-1 $NAME 
  #
  # {
  #   "i-9e1dfa63": {
  #     "dns": "ec2-54-175-236-111.compute-1.amazonaws.com",
  #     "name": "logstash-02"
  #   },
  #   "i-9f1dfa62": {
  #     "dns": "ec2-54-175-242-4.compute-1.amazonaws.com",
  #     "name": "logstash-02"
  #   }
  # }
  
  # -D deletes options after using
  # -E changes the parsing rules to not stop at the first string that isn't described by one of the specs
  # -A stores results in associations
  # : means argument IS  mandatory
  # : means argument IS  mandatory
  # :: means argument IS NOT mandatory
  zparseopts -D -E -A ARGMAP -region:: r::=region

  # set region from --region, -r, or default
  region_default=us-east-1
  region=${ARGMAP[--region]:-${ARGMAP[-r]:-${region_default}}}

  local cmd='aws ec2 describe-instances --region ${region} --filters "Name=instance-state-name,Values=running"'
  local jqcmd="jq --sort-keys '.Reservations | map(.Instances) | flatten | map({key: .InstanceId, value: {name: .Tags[0].Value, dns: .PublicDnsName, private_dns: .PrivateDnsName, private_ip: .PrivateIpAddress, public_ip: .PublicIpAddress}}) | from_entries'"
  if [[ -n $1 ]]; then
    cmd="$cmd --filters 'Name=tag:Name,Values=*$1*'"
  fi

  eval $cmd | eval $jqcmd
} 

############## JQ HELPERS

# Find all unique json keys in a json file
jq_uniq_keys() {
  ftype=$(stat -f "%T" $stdin)
  if [[ "$ftype" != "|" ]]; then
     FILE=$1
  else
     FILE=${FILE:-/dev/stdin}
  fi

  cat $FILE | jq 'paths | map(.|tostring) | join(".")' | sed -E 's/\.[[:digit:]]+/.[]/g' | sort | uniq
}

### PROXY
# takes as argument "Wi-Fi" or "Thunderbolt Ethernet"
network_active() {
  # find ip address of network interface
  ip=$(networksetup -getinfo $1 | perl -l -ne '/^IP address: (.*)/ && print $1')

  # if ip exists
  if [[ -z "$ip" ]]; then
    # false
    return 1
  else
    # true
    return 0
  fi
}

tunnel_csua() {
  is_ethernet=$(network_active "Thunderbolt Ethernet")
  if [[ is_ethernet == 0 ]]; then
    device="Thunderbolt Ethernet"
  else
    device="Wi-Fi"
  fi

  echo "Turning on proxy for ${device}"
  networksetup -setsocksfirewallproxystate "${device}" on

  echo "Tunnelling to CSUA"
  ssh -D 8080 -C -q -N esiegel@csua.berkeley.edu

  echo "Turning off proxy"
  networksetup -setsocksfirewallproxystate "${device}" off
}

tunnel_docean() {
  echo "Turning on proxy"
  # networksetup -setsocksfirewallproxystate wi-fi on
  networksetup -setsocksfirewallproxystate 'Thunderbolt Ethernet' on

  echo "Tunnelling to docean"
  ssh -D 8080 -C -q -N root@docean

  echo "Turning off proxy"
  # networksetup -setsocksfirewallproxystate wi-fi off
  networksetup -setsocksfirewallproxystate 'Thunderbolt Ethernet' off
}

############## DOCKER
docker_bash_latest() {
  image_id=$(docker images | tail -n+2 | head -n 1 | squeeze | cut -d ' ' -f 3)
  docker run -it ${image_id} /bin/bash
}

############## fnm

# nvm replacement for managing node envs
eval "$(fnm env --use-on-cd)"

############## broot home
source "$HOME/.config/broot/launcher/bash/br"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

############## java
export PATH="$HB/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I$HB/opt/openjdk/include"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$("$HB/Caskroom/miniconda/base/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HB/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "$HB/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="$HB/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

############## memory improvements
# better process info
alias psx='ps xfo pid,etime,pcpu,rss:9,state,cmd'
alias psa='ps xafo pid,user:18,etime,pcpu,rss:9,state,cmd'

alias jq_struct='jq '"'"'select(objects)|=[.] | map( paths(scalars) ) | map( map(select(numbers)="[]") | join(".")) | unique'"'"

############## BUILD

export LDFLAGS="-L$HB/lib -L$HB/opt/zlib/lib -Wl,-rpath,$HB/opt/llvm/lib/c++"
export CFLAGS="-I$HB/include -I$HB/opt/zlib/include -Wno-enum-constexpr-conversion"
export CPPFLAGS="-I$HB/include -I$HB/opt/zlib/include -Wno-enum-constexpr-conversion"
export C_INCLUDE_PATH="$HB/include"

############## LLVM (clang)

# TODO ITK isn't building with clang 18 so we have this commented out
# We are ignoring `no-enum-constexpr-conversion` for now as ITK fail to compile with clang 16
# export PATH="$HB/opt/llvm/bin:$PATH"
# export LDFLAGS="-L$HB/lib -L$HB/opt/llvm/lib/c++ -L$HB/opt/zlib/lib -Wl,-rpath,$HB/opt/llvm/lib/c++"
# export CFLAGS="-I$HB/include -I$HB/opt/llvm/include -I$HB/opt/zlib/include -Wno-enum-constexpr-conversion"
# export CPPFLAGS="-I$HB/include -I$HB/opt/llvm/include -I$HB/opt/zlib/include -Wno-enum-constexpr-conversion"
# export C_INCLUDE_PATH="$HB/include:$HB/opt/llvm/include"
# export CPLUS_INCLUDE_PATH="$HB/include:$HB/opt/llvm/include"
# export CC="$HB/opt/llvm/bin/clang"
# export CXX="$HB/opt/llvm/bin/clang++"

############## google cloud

source "$HB/share/google-cloud-sdk/path.zsh.inc"
source "$HB/share/google-cloud-sdk/completion.zsh.inc"
